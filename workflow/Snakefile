configfile: "config/config.yaml"

FORMAT = config['FORMAT']

ALIGNER = config['use_hisat3n']

SAMP_NAMES = list(config['samples'].keys())

CPU_num = config['cpus']

PAIRS = [1, 2]

CTL_NAMES = list(config['control_samples'])

nctl = len(CTL_NAMES)

def get_input_fastqs(wildcards):
    return config["samples"][wildcards.sample]

# if FORMAT == 'PE':
#     rule all:
#         input:
#             expand("results/bams/{S_ID}Aligned.out.bam", S_ID=SAMP_NAMES)
# else:
#     rule all:
#         input:
#             expand("results/fastq_cut/{S_ID}.t.fastq", S_ID=SAMP_NAMES)

rule all:
    input:
        "results/cB/cB.csv.gz",
        expand("results/tracks/{S_ID}_success.txt", S_ID=SAMP_NAMES)
        #expand("results/counts/{S_ID}_counts.csv.gz", S_ID=SAMP_NAMES)



if FORMAT == 'PE':


    rule preprocess:
        input:
            get_input_fastqs
        output:
            "results/fastq_cut/{sample}.t.r1.fastq",
            "results/fastq_cut/{sample}.t.r2.fastq"
        log:
            "logs/preprocess/{sample}.log"
        threads: CPU_num
        shell:
            "workflow/scripts/preprocess_all.sh {config[cpus]} {wildcards.sample} {input} {config[FORMAT]} {output}"

    if ALIGNER:
        rule align:
            input:
                "results/fastq_cut/{sample}.t.r1.fastq",
                "results/fastq_cut/{sample}.t.r2.fastq"
            output:
                "results/bams/{sample}Aligned.out.bam"
            log:
                "logs/align/{sample}.log"
            threads: CPU_num
            shell:
                "workflow/scripts/hisat_3n.sh {config[cpus]} {wildcards.sample} {config[FORMAT]} {config[READS]} {config[chr_tag]} {config[HISAT_3N]} {config[hisat3n_path]} {config[mut_tracks]} {input} {output}"

    else:
        rule align:
            input:
                "results/fastq_cut/{sample}.t.r1.fastq",
                "results/fastq_cut/{sample}.t.r2.fastq"
            output:
                "results/bams/{sample}Aligned.out.bam"
            log:
                "logs/align/{sample}.log"
            threads: CPU_num
            shell:
                "workflow/scripts/hisat2.sh {config[cpus]} {wildcards.sample} {config[FORMAT]} {config[READS]} {config[chr_tag]} {config[HISAT2]} {input} {output}"

else:

    rule preprocess:
        input:
            get_input_fastqs
        output:
            "results/fastq_cut/{sample}.t.fastq"
        log:
            "logs/sort_filter/{sample}.log"
        threads: CPU_num
        shell:
            "workflow/scripts/preprocess_all.sh {config[cpus]} {wildcards.sample} {input} {config[FORMAT]} {output}"

    if ALIGNER:
        rule align:
            input:
                "results/fastq_cut/{sample}.t.fastq",
            output:
                "results/bams/{sample}Aligned.out.bam"
            log:
                "logs/align/{sample}.log"
            threads: CPU_num
            shell:
                "workflow/scripts/hisat2.sh {config[cpus]} {wildcards.sample} {config[FORMAT]} {config[READS]} {config[chr_tag]} {config[HISAT2]} {input} {output}"
    else:
        rule align:
            input:
                "results/fastq_cut/{sample}.t.fastq",
            output:
                "results/bams/{sample}Aligned.out.bam"
            log:
                "logs/align/{sample}.log"
            threads: CPU_num
            shell:
                "workflow/scripts/hisat2.sh {config[cpus]} {wildcards.sample} {config[FORMAT]} {config[READS]} {config[chr_tag]} {config[HISAT2]} {input} {output}"

rule sort_filter:
    input:
        "results/bams/{sample}Aligned.out.bam"
    output:
        "results/sf_reads/{sample}.s.sam"
    log:
        "logs/sort_filter/{sample}.log"
    threads: CPU_num
    shell:
        "workflow/scripts/sort_filter.sh {config[cpus]} {wildcards.sample} {input} {output} {config[FORMAT]}"

rule htseq_cnt:
    input:
        "results/sf_reads/{sample}.s.sam"
    output:
        "results/htseq_cnt/{sample}_tl.bam"
    log:
        "logs/htseq_cnt/{sample}.log"
    threads: CPU_num
    shell:
        "workflow/scripts/htseq.sh {config[cpus]} {wildcards.sample} {input} {output} {config[annotation]} {config[mutcnt]}"

rule call_snps:
    input:
        expand("results/htseq_cnt/{ctl}_tl.bam", ctl = CTL_NAMES)
    params:
        nsamps = nctl
    output:
        "results/snps/snp.txt"
    log:
        "logs/call_snps/ctl_samps.log"
    threads: CPU_num
    shell:
        "workflow/scripts/call_snps.sh {config[cpus]} {params.nsamps} {output} {config[genome_fasta]} {input}"

rule cnt_muts:
    input:
        "results/htseq_cnt/{sample}_tl.bam",
        "results/snps/snp.txt"
    output:
        "results/counts/{sample}_counts.csv.gz"
    log:
        "logs/fragment_bam/{sample}.log"
    threads: CPU_num
    shell:
        "workflow/scripts/fragment.sh {config[cpus]} {wildcards.sample} {input} {output} {config[awkscript]} {config[fragment_size]} {config[minqual]} {config[mut_tracks]} {config[mutcall]} {config[FORMAT]}"

rule maketdf:
    input:
        "results/counts/{sample}_counts.csv.gz",
        "results/htseq_cnt/{sample}_tl.bam"
    output:
        "results/tracks/{sample}_success.txt"
    threads: CPU_num
    shell:
        "workflow/scripts/tracks.sh {config[cpus]} {wildcards.sample} {input} {config[mut_tracks]} {output} {config[genome_fasta]} {config[WSL]}"

rule makecB:
    input:
        expand("results/counts/{sample}_counts.csv.gz", sample=SAMP_NAMES)
    output:
        "results/cB/cB.csv.gz"
    log:
        "logs/makecB/master.log"
    threads: CPU_num
    shell:
        "workflow/scripts/master.sh {config[cpus]} {output} {config[keepcols]} {config[mut_tracks]}"
